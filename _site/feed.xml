<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-01-31T11:58:21-05:00</updated><id>/feed.xml</id><title type="html">Robert B. Wexler</title><subtitle>Tips and tricks for electronic structure calculations from a  soon-to-be PhD in chemistry.</subtitle><entry><title type="html">Running Quantum Espresso on Conrad</title><link href="/qe/2019/01/29/running-qe-on-conrad.html" rel="alternate" type="text/html" title="Running Quantum Espresso on Conrad" /><published>2019-01-29T00:00:00-05:00</published><updated>2019-01-29T00:00:00-05:00</updated><id>/qe/2019/01/29/running-qe-on-conrad</id><content type="html" xml:base="/qe/2019/01/29/running-qe-on-conrad.html">&lt;p&gt;Today, I figured out that there is a working &lt;code class=&quot;highlighter-rouge&quot;&gt;pw.x&lt;/code&gt; executable for Quantum Espresso on the DoD machine Conrad. It is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/espresso/6.3-intel/bin&lt;/code&gt;. All you need is a PBS script with an execution line like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aprun -n 32 /app/espresso/6.3-intel/bin/pw.x &amp;lt; qe.in &amp;gt; qe.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, you need to do &lt;code class=&quot;highlighter-rouge&quot;&gt;module load intel&lt;/code&gt; prior to submitting the job. You can either add a line in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; or place it in the PBS script. Enjoy!&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I figured out that there is a working pw.x executable for Quantum Espresso on the DoD machine Conrad. It is located in /app/espresso/6.3-intel/bin. All you need is a PBS script with an execution line like</summary></entry><entry><title type="html">Compiling LAMMPS on Koehr</title><link href="/compiling/lammps/2019/01/28/compiling-lammps-on-koehr.html" rel="alternate" type="text/html" title="Compiling LAMMPS on Koehr" /><published>2019-01-28T00:00:00-05:00</published><updated>2019-01-28T00:00:00-05:00</updated><id>/compiling/lammps/2019/01/28/compiling-lammps-on-koehr</id><content type="html" xml:base="/compiling/lammps/2019/01/28/compiling-lammps-on-koehr.html">&lt;p&gt;Today, I was able to successfully compile LAMMPS on DoD machine Koehr. First, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;mpicc&lt;/code&gt; as my C++ compiler. Then, I manually pointed the makefile to Intel’s MPI libraries using the following three lines of code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MPI_INC =       -I/app/intel/parallel_studio_xe_2018_update1/impi/2018.1.163/intel64/include
MPI_PATH =      -L/app/intel/parallel_studio_xe_2018_update1/impi/2018.1.163/intel64/lib
MPI_LIB =
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, I manually pointed the makefile to the FFTW3 library as follows :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FFT_INC =       -I/app/COST/fftw3/3.3.5/intel/include
FFT_PATH =      -L/app/COST/fftw3/3.3.5/intel/lib
FFT_LIB =       -lfftw3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s all she wrote! Of course, I executed make in parallel as &lt;code class=&quot;highlighter-rouge&quot;&gt;make -j 48 &amp;lt;Makefile suffix&amp;gt;&lt;/code&gt;. Next, I’m going to test this recipe on other DoD computers.&lt;/p&gt;

&lt;p&gt;P.S. It is necessary to load the modules &lt;code class=&quot;highlighter-rouge&quot;&gt;costinit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fftw3/intel/3.3.5&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;compiler/intelmpi/18.0.1.163&lt;/code&gt; prior to running LAMMPS. I added two lines in my &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; to take care of this. This can also be done in your PBS script.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I was able to successfully compile LAMMPS on DoD machine Koehr. First, I used mpicc as my C++ compiler. Then, I manually pointed the makefile to Intel’s MPI libraries using the following three lines of code:</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2019/01/24/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-01-24T21:31:09-05:00</published><updated>2019-01-24T21:31:09-05:00</updated><id>/jekyll/update/2019/01/24/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2019/01/24/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>